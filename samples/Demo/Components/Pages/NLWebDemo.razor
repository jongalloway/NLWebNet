@page "/nlweb"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject NLWebNet.Demo.Services.IAIConfigurationService AIConfigService
@using NLWebNet.Models
@using System.Text.Json
@using NLWebNet.Demo.Components

<PageTitle>NLWebNet Demo</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="mb-0">
                    <i class="fas fa-globe-americas text-primary me-2"></i>
                    NLWebNet Interactive Demo
                </h1>
                <div class="btn-group" role="group">
                    <button type="button" class="btn @(activeTab == "query" ? "btn-primary" : "btn-outline-primary")"
                        @onclick='() => SetActiveTab("query")'>
                        <i class="fas fa-search me-1"></i>Query
                    </button>
                    <button type="button"
                        class="btn @(activeTab == "streaming" ? "btn-primary" : "btn-outline-primary")"
                        @onclick='() => SetActiveTab("streaming")'>
                        <i class="fas fa-stream me-1"></i>Streaming
                    </button>
                    <button type="button" class="btn @(activeTab == "api" ? "btn-primary" : "btn-outline-primary")"
                        @onclick='() => SetActiveTab("api")'>
                        <i class="fas fa-code me-1"></i>API Test
                    </button>
                </div>
            </div>
            @if (activeTab == "query")
            {
                <div class="row">
                    @if (!AIConfigService.IsAIConfigured)
                    {
                        <div class="col-12 mb-4">
                            <GitHubTokenInput OnTokenConfigured="HandleTokenConfigured" IsLoading="isLoading" />
                        </div>
                    }

                    <div class="col-lg-6">
                        @if (AIConfigService.IsAIConfigured)
                        {
                            <div class="alert alert-success mb-3">
                                <i class="fas fa-check-circle me-2"></i>
                                <strong>AI Provider:</strong> @AIConfigService.GetCurrentProvider()
                            </div>
                        }

                        <QueryInput OnSubmit="HandleQuerySubmitted" IsLoading="isLoading" @ref="queryInputComponent" />
                    </div>
                    <div class="col-lg-6">
                        @if (currentResponse != null)
                        {
                            <ResultsDisplay Response="currentResponse" ShowDebugInfo="true"
                                OnResultClicked="HandleResultClicked" />
                        }
                        else if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="card">
                                <div class="card-body">
                                    <div class="alert alert-danger">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        <strong>Error:</strong> @errorMessage
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (activeTab == "streaming")
            {
                <div class="row">
                    <div class="col-lg-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Streaming Query</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Query</label>
                                    <input type="text" class="form-control" @bind="streamingQuery"
                                        placeholder="Enter streaming query..." />
                                </div>
                                <button class="btn btn-primary" @onclick="StartStreamingQuery"
                                    disabled="@(isStreaming || string.IsNullOrWhiteSpace(streamingQuery))">
                                    @if (isStreaming)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="fas fa-play me-1"></i>Start Streaming
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-8">
                        <StreamingDisplay IsStreaming="isStreaming" IsCompleted="streamingCompleted"
                            QueryId="streamingQueryId" OnStopStreaming="StopStreaming" @ref="streamingDisplay" />
                    </div>
                </div>
            }
            else if (activeTab == "api")
            {
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">API Testing Interface</h5>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Test the NLWebNet API endpoints directly. This will be implemented in the next
                                    iteration.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string activeTab = "query";
    private bool isLoading = false;
    private string errorMessage = "";

    // Query tab
    private QueryInput? queryInputComponent;
    private NLWebResponse? currentResponse;

    // Streaming tab
    private string streamingQuery = "";
    private bool isStreaming = false;
    private bool streamingCompleted = false; private string streamingQueryId = "";
    private StreamingDisplay? streamingDisplay;

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        errorMessage = "";
    }
    private async Task HandleQuerySubmitted(NLWebRequest request)
    {
        isLoading = true;
        errorMessage = "";
        currentResponse = null;

        try
        {
            // Dynamically set BaseAddress if not already set
            if (HttpClient.BaseAddress == null)
            {
                var baseUri = NavigationManager.BaseUri;
                if (!string.IsNullOrEmpty(baseUri))
                {
                    HttpClient.BaseAddress = new Uri(baseUri);
                    Console.WriteLine($"[Blazor] Set HttpClient.BaseAddress to: {baseUri}");
                }
            }
            // Enhanced client logging: log outgoing request
            Console.WriteLine($"[Blazor] Sending POST to /ask with payload: {JsonSerializer.Serialize(request)}");
            var response = await HttpClient.PostAsJsonAsync("/ask", request);
            Console.WriteLine($"[Blazor] Received response: StatusCode={response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[Blazor] Response content: {responseContent}");
                currentResponse = JsonSerializer.Deserialize<NLWebResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[Blazor] API Error ({response.StatusCode}): {errorContent}");
                errorMessage = $"API Error ({response.StatusCode}): {errorContent}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network Error: {ex.Message} (StackTrace: {ex.StackTrace})";
            Console.WriteLine($"[Blazor] Network Error: {ex.Message}\n{ex.StackTrace}");
        }
        catch (JsonException ex)
        {
            errorMessage = $"Response Parsing Error: {ex.Message} (StackTrace: {ex.StackTrace})";
            Console.WriteLine($"[Blazor] Response Parsing Error: {ex.Message}\n{ex.StackTrace}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected Error: {ex.Message} (StackTrace: {ex.StackTrace})";
            Console.WriteLine($"[Blazor] Unexpected Error: {ex.Message}\n{ex.StackTrace}");
        }
        finally
        {
            isLoading = false;
        }
    }
    private void HandleResultClicked(NLWebResult result)
    {
        // Handle result click - could navigate, show details, etc.
        JSRuntime.InvokeVoidAsync("open", result.Url, "_blank");
    }
    private async Task StartStreamingQuery()
    {
        if (string.IsNullOrWhiteSpace(streamingQuery))
            return;

        isStreaming = true;
        streamingCompleted = false;
        streamingQueryId = Guid.NewGuid().ToString();

        // Clear previous results
        streamingDisplay?.ClearStream();

        try
        {
            // Make actual HTTP call to NLWebNet streaming API
            var streamingRequest = new NLWebRequest
            {
                Query = streamingQuery,
                Mode = QueryMode.Summarize, // Use summarize for better streaming demo
                Streaming = true,
                QueryId = streamingQueryId
            };

            streamingDisplay?.AddTextChunk("Starting streaming query...");

            // Call the streaming endpoint
            var response = await HttpClient.PostAsJsonAsync("/ask", streamingRequest);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var nlwebResponse = JsonSerializer.Deserialize<NLWebResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (nlwebResponse != null)
                {
                    streamingDisplay?.AddTextChunk($"Query ID: {nlwebResponse.QueryId}");

                    // Add results
                    if (nlwebResponse.Results != null)
                    {
                        foreach (var result in nlwebResponse.Results)
                        {
                            streamingDisplay?.AddResultChunk(result);
                            await Task.Delay(200); // Small delay for visual effect
                        }
                    }

                    // Add summary if available
                    if (!string.IsNullOrEmpty(nlwebResponse.Summary))
                    {
                        streamingDisplay?.AddSummaryChunk(nlwebResponse.Summary);
                    }

                    // Add generated response if available
                    if (!string.IsNullOrEmpty(nlwebResponse.GeneratedResponse))
                    {
                        streamingDisplay?.AddTextChunk($"Generated Response: {nlwebResponse.GeneratedResponse}");
                    }

                    streamingDisplay?.AddTextChunk("Streaming query completed successfully.");
                }
                else
                {
                    streamingDisplay?.AddErrorChunk("Failed to parse API response.");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                streamingDisplay?.AddErrorChunk($"API Error ({response.StatusCode}): {errorContent}");
            }
        }
        catch (HttpRequestException ex)
        {
            streamingDisplay?.AddErrorChunk($"Network Error: {ex.Message}");
        }
        catch (JsonException ex)
        {
            streamingDisplay?.AddErrorChunk($"Response Parsing Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            streamingDisplay?.AddErrorChunk($"Streaming error: {ex.Message}");
        }
        finally
        {
            isStreaming = false;
            streamingCompleted = true;
        }
    }
    private Task StopStreaming()
    {
        isStreaming = false;
        streamingDisplay?.AddTextChunk("Streaming stopped by user.");
        return Task.CompletedTask;
    }
    private async Task HandleTokenConfigured(string token)
    {
        if (!string.IsNullOrEmpty(token))
        {
            var success = await AIConfigService.ConfigureGitHubModelsAsync(token, "gpt-4o");
            if (success)
            {
                StateHasChanged(); // Refresh the UI to show the configuration status
            }
            else
            {
                // Log error but still refresh UI
                StateHasChanged();
            }
        }
        else
        {
            await AIConfigService.ClearGitHubConfigurationAsync();
            StateHasChanged(); // Refresh the UI
        }
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}
