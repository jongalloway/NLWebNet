@using NLWebNet.Models
@inject IJSRuntime JSRuntime

@if (Response != null)
{
    <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
                <i class="fas fa-chart-bar me-2"></i>Results
            </h5>
            <div class="d-flex align-items-center">
                @if (Response.Results?.Any() == true)
                {
                    <span class="badge bg-success me-2">@Response.Results.Count result(s)</span>
                }
                <small class="text-muted">Query ID: @Response.QueryId</small>
            </div>
        </div>
        
        @* Data Source Indicators - Top Level Design Element *@
        @if (Response.Results?.Any() == true)
        {
            <div class="card-body border-bottom bg-light">
                <h6 class="mb-3"><i class="fas fa-database me-2"></i>Data Sources</h6>
                <div class="row g-3">
                    @{
                        var rssCount = Response.Results.Count(r => r.Site == "devblogs.microsoft.com");
                        var mockCount = Response.Results.Count(r => r.Name.StartsWith("[Mock Data]"));
                        var staticCount = Response.Results.Count - rssCount - mockCount;
                    }
                    
                    @* RSS Feed Data Source *@
                    <div class="col-md-4">
                        <div class="card h-100 @(rssCount > 0 ? "border-primary" : "border-secondary opacity-50")">
                            <div class="card-body text-center">
                                <div class="mb-2">
                                    <i class="fas fa-rss fa-2x @(rssCount > 0 ? "text-primary" : "text-secondary")"></i>
                                </div>
                                <h6 class="card-title">Live RSS Feeds</h6>
                                <p class="card-text small text-muted">.NET Blog & News</p>
                                <span class="badge @(rssCount > 0 ? "bg-primary" : "bg-secondary")">
                                    @rssCount result(s)
                                </span>
                            </div>
                        </div>
                    </div>
                    
                    @* Static Schema.org Data Source *@
                    <div class="col-md-4">
                        <div class="card h-100 @(staticCount > 0 ? "border-info" : "border-secondary opacity-50")">
                            <div class="card-body text-center">
                                <div class="mb-2">
                                    <i class="fas fa-rocket fa-2x @(staticCount > 0 ? "text-info" : "text-secondary")"></i>
                                </div>
                                <h6 class="card-title">Schema.org Static Data</h6>
                                <p class="card-text small text-muted">Science Fiction Content</p>
                                <span class="badge @(staticCount > 0 ? "bg-info" : "bg-secondary")">
                                    @staticCount result(s)
                                </span>
                            </div>
                        </div>
                    </div>
                    
                    @* Mock Data Source *@
                    <div class="col-md-4">
                        <div class="card h-100 @(mockCount > 0 ? "border-warning" : "border-secondary opacity-50")">
                            <div class="card-body text-center">
                                <div class="mb-2">
                                    <i class="fas fa-flask fa-2x @(mockCount > 0 ? "text-warning" : "text-secondary")"></i>
                                </div>
                                <h6 class="card-title">Mock Data</h6>
                                <p class="card-text small text-muted">Placeholder Content</p>
                                <span class="badge @(mockCount > 0 ? "bg-warning" : "bg-secondary")">
                                    @mockCount result(s)
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        
        <div class="card-body">
            @if (!string.IsNullOrEmpty(Response.Summary))
            {
                <div class="alert alert-info">
                    <h6><i class="fas fa-info-circle me-2"></i>Summary</h6>
                    <p class="mb-0">@Response.Summary</p>
                </div>
            }
     @if (!string.IsNullOrEmpty(Response.GeneratedResponse))
            {
                <div class="alert alert-success">
                    <h6><i class="fas fa-robot me-2"></i>Generated Answer</h6>
                    <div class="generated-answer">
                        @((MarkupString)FormatGeneratedAnswer(Response.GeneratedResponse))
                    </div>
                </div>
            }

            @if (Response.Results?.Any() == true)
            {
                <div class="results-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">Search Results</h6>
                        <div class="btn-group btn-group-sm" role="group"> <input type="radio" class="btn-check" name="viewMode"
                                id="cardView" checked="@(ViewMode == "card")" @onchange="SetCardView">
                            <label class="btn btn-outline-secondary" for="cardView">
                                <i class="fas fa-th-large"></i> Cards
                            </label>
                            <input type="radio" class="btn-check" name="viewMode" id="listView" checked="@(ViewMode == "list")"
                                @onchange="SetListView">
                            <label class="btn btn-outline-secondary" for="listView">
                                <i class="fas fa-list"></i> List
                            </label>
                        </div>
                    </div>

                    @if (ViewMode == "card")
                    {
                        <div class="row">
                            @foreach (var result in Response.Results.Take(DisplayLimit))
                            {
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card h-100 result-card" style="cursor: pointer;"
                                        @onclick="() => HandleResultClick(result)">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h6 class="card-title">
                                                    @if (!string.IsNullOrEmpty(result.Url))
                                                    {
                                                        <a href="@result.Url" target="_blank" class="text-decoration-none"
                                                            @onclick:stopPropagation="true">
                                                            @result.Name
                                                            <i class="fas fa-external-link-alt fa-sm ms-1"></i>
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        @result.Name
                                                    }
                                                </h6>
                                                <span class="badge bg-primary">@result.Score.ToString("F2")</span>
                                            </div>                                            @if (!string.IsNullOrEmpty(result.Description))
                                            {
                                                <p class="card-text small">@((MarkupString)FormatDescription(result))</p>
                                            }                                            @if (!string.IsNullOrEmpty(result.Site))
                                            {
                                                <div class="mt-2">
                                                    @{
                                                        var badgeClass = GetDataSourceBadgeClass(result);
                                                        var sourceLabel = GetDataSourceLabel(result);
                                                    }
                                                    <span class="badge @badgeClass me-1">@sourceLabel</span>
                                                    <span class="badge bg-secondary">@result.Site</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {

                        <div class="list-group">
                            @foreach (var result in Response.Results.Take(DisplayLimit))
                            {
                                <div class="list-group-item" style="cursor: pointer;" @onclick="() => HandleResultClick(result)">
                                    <div class="d-flex w-100 justify-content-between align-items-center">
                                        <h6 class="mb-1">
                                            @if (!string.IsNullOrEmpty(result.Url))
                                            {
                                                <a href="@result.Url" target="_blank" class="text-decoration-none"
                                                    @onclick:stopPropagation="true">
                                                    @result.Name
                                                    <i class="fas fa-external-link-alt fa-sm ms-1"></i>
                                                </a>
                                            }
                                            else
                                            {
                                                @result.Name
                                            }
                                        </h6>                                        <div>
                                            <span class="badge bg-primary me-2">@result.Score.ToString("F2")</span>
                                            @{
                                                var badgeClass = GetDataSourceBadgeClass(result);
                                                var sourceLabel = GetDataSourceLabel(result);
                                            }
                                            <span class="badge @badgeClass me-1">@sourceLabel</span>
                                            @if (!string.IsNullOrEmpty(result.Site))
                                            {
                                                <span class="badge bg-secondary">@result.Site</span>
                                            }
                                        </div>
                                    </div>                                    @if (!string.IsNullOrEmpty(result.Description))
                                    {
                                        <p class="mb-1 small">@((MarkupString)FormatDescription(result))</p>
                                    }
                                </div>
                            }
                        </div>
                    }

                    @if (Response.Results.Count > DisplayLimit)
                    {
                        <div class="text-center mt-3">
                            <button class="btn btn-outline-primary" @onclick="ShowMoreResults">
                                Show More (@(Response.Results.Count - DisplayLimit) remaining)
                            </button>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center text-muted py-4">
                    <i class="fas fa-search fa-2x mb-3"></i>
                    <p>No results found for your query.</p>
                </div>
            }
     @if (ShowDebugInfo && Response != null)
            {
                <div class="mt-4 pt-3 border-top">
                    <h6>
                        <i class="fas fa-code me-2"></i>Debug Information
                        <button class="btn btn-link btn-sm" @onclick="ToggleDebugInfo">
                            <i class="fas fa-times"></i>
                        </button>
                    </h6>
                    <pre class="bg-light p-3 rounded small">@FormatJson(Response)</pre>
                </div>
            }
            else
            {
                <div class="mt-3">
                    <button type="button" class="btn btn-link btn-sm p-0" @onclick="ToggleDebugInfo">
                        <i class="fas fa-code me-1"></i>Show Debug Info
                    </button>
                </div>
            }
        </div>
    </div>
}

<style>
    .result-card {
        transition: transform 0.2s ease-in-out;
    }

    .result-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .generated-answer {
        white-space: pre-wrap;
        line-height: 1.6;
    }
</style>

@code {
    [Parameter] public NLWebResponse? Response { get; set; }
    [Parameter] public bool ShowDebugInfo { get; set; } = false;
    [Parameter] public EventCallback<NLWebResult> OnResultClicked { get; set; }

    private string ViewMode = "card";
    private int DisplayLimit = 6; private void ToggleDebugInfo()
    {
        ShowDebugInfo = !ShowDebugInfo;
    }

    private void ShowMoreResults()
    {
        DisplayLimit += 6;
    }

    private void SetCardView()
    {
        ViewMode = "card";
    }
    private void SetListView()
    {
        ViewMode = "list";
    }

    private async Task HandleResultClick(NLWebResult result)
    {
        if (OnResultClicked.HasDelegate)
        {
            await OnResultClicked.InvokeAsync(result);
        }
    }

    private string FormatGeneratedAnswer(string answer)
    {
        if (string.IsNullOrEmpty(answer))
            return "";

        // Basic markdown-like formatting
        var formatted = answer
        .Replace("\n\n", "<br><br>")
        .Replace("\n", "<br>")
        .Replace("**", "<strong>")
        .Replace("**", "</strong>");

        return formatted;
    }    private string FormatJson(object? obj)
    {
        if (obj == null) return "null";

        try
        {
            return System.Text.Json.JsonSerializer.Serialize(obj, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });
        }
        catch
        {
            return obj.ToString() ?? "null";
        }
    }    private string FormatDescription(NLWebResult result)
    {
        if (string.IsNullOrEmpty(result.Description))
            return "";

        var description = result.Description;

        // Remove HTML tags ONLY for RSS content from devblogs.microsoft.com
        if (result.Site == "devblogs.microsoft.com")
        {
            description = StripHtmlTags(description);
        }

        return description;
    }private bool IsRssContent(NLWebResult result)
    {
        // RSS content is ONLY from devblogs.microsoft.com
        // Static sci-fi content should NOT be considered RSS even if it has BlogPosting type
        return result.Site == "devblogs.microsoft.com";
    }

    private string StripHtmlTags(string html)
    {
        if (string.IsNullOrEmpty(html))
            return "";

        // Basic HTML tag removal - removes anything between < and >
        return System.Text.RegularExpressions.Regex.Replace(html, "<.*?>", string.Empty);
    }

    private string GetDataSourceBadgeClass(NLWebResult result)
    {
        if (result.Name.StartsWith("[Mock Data]"))
            return "bg-warning";
        
        if (result.Site == "devblogs.microsoft.com" || IsRssContent(result))
            return "bg-primary";
        
        return "bg-info"; // Static Schema.org content
    }

    private string GetDataSourceLabel(NLWebResult result)
    {
        if (result.Name.StartsWith("[Mock Data]"))
            return "Mock";
        
        if (result.Site == "devblogs.microsoft.com" || IsRssContent(result))
            return "RSS";
        
        return "Schema.org"; // Static content
    }
}
