name: Build and Test

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'
  DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should_skip }}
    steps:
    - id: skip-check
      uses: fkirc/skip-duplicate-actions@v5
      with:
        concurrent_skipping: 'same_content_newer'
        skip_after_successful_duplicate: 'true'
        paths_ignore: '["**/*.md", "**/docs/**"]'

  build:
    runs-on: ${{ matrix.os }}
    needs: check-changes
    if: needs.check-changes.outputs.should-skip != 'true'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        configuration: [Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore --verbosity minimal

    - name: Test solution
      run: |
        # Check if there are any test projects in the solution
        TEST_PROJECTS=$(find tests -name "*.csproj" -exec grep -l "Microsoft.NET.Test.Sdk\|xunit\|NUnit\|MSTest" {} \; 2>/dev/null || true)
        
        if [ -n "$TEST_PROJECTS" ]; then
          echo "Found test projects, running tests..."
          dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity minimal --logger "trx;LogFileName=test-results-${{ matrix.configuration }}.trx" --results-directory TestResults/
        else
          echo "No test projects found - skipping tests"
          mkdir -p TestResults
          echo "##[warning]No test projects found"
        fi
      continue-on-error: false

    - name: Build demo application
      run: dotnet build demo --configuration ${{ matrix.configuration }} --no-restore --verbosity minimal

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results (${{ matrix.configuration }})
        path: TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: false
        fail-on-empty: false

    - name: Upload build artifacts
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}
        path: |
          src/*/bin/Release/
          demo/bin/Release/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-skip != 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "‚ùå Vulnerable packages found!"
          exit 1
        else
          echo "‚úÖ No vulnerable packages found."
        fi

  package-validation:
    runs-on: ubuntu-latest
    needs: [check-changes, build]
    if: needs.check-changes.outputs.should-skip != 'true' && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Fetch all tags for versioning
      run: git fetch --tags --force

    - name: Restore dependencies
      run: dotnet restore

    - name: Determine Version
      id: version
      run: |
        # Check if this is a tag push
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "üì¶ Using tag version: ${VERSION}"
          IS_RELEASE_TAG="true"
        else
          # Get the latest git tag or use 0.1.0 as default
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          
          # Remove 'v' prefix if present
          VERSION=${LATEST_TAG#v}
          
          # Add pre-release suffix with commit count and short SHA
          COMMITS_SINCE_TAG=$(git rev-list --count ${LATEST_TAG}..HEAD 2>/dev/null || echo "0")
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION="${VERSION}-alpha.${COMMITS_SINCE_TAG}+${SHORT_SHA}"
          echo "üì¶ Using development version: ${VERSION}"
          IS_RELEASE_TAG="false"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "is_release_tag=${IS_RELEASE_TAG}" >> $GITHUB_OUTPUT

    - name: Check version output
      run: |
        if [ -z "${{ steps.version.outputs.version }}" ]; then
          echo "‚ùå PackageVersion is not set!"
          echo "Debug info:"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "Available tags:"
          git tag -l
          exit 1
        else
          echo "‚úÖ PackageVersion: ${{ steps.version.outputs.version }}"
          echo "‚úÖ Is release tag: ${{ steps.version.outputs.is_release_tag }}"
        fi

    - name: Build (Release) for packaging
      run: dotnet build src/NLWebNet --configuration Release --no-restore --verbosity minimal

    - name: Pack NuGet package
      run: dotnet pack src/NLWebNet --configuration Release --no-build --output ./packages -p:PackageVersion=${{ steps.version.outputs.version }}

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
        retention-days: 30

    - name: Validate NuGet Package
      run: |
        echo "üì¶ Validating NuGet package..."
        dotnet tool install --global dotnet-validate --version 0.0.1-preview.537
        PACKAGE_FILE=$(find ./packages -name "*.nupkg" | head -n 1)
        echo "Validating package: $PACKAGE_FILE"
        dotnet validate package local "$PACKAGE_FILE"

    - name: Publish to NuGet.org
      if: steps.version.outputs.is_release_tag == 'true'
      run: |
        PACKAGE_FILE=$(find ./packages -name "*.nupkg" | head -n 1)
        echo "üöÄ Publishing package to NuGet.org: $PACKAGE_FILE"
        dotnet nuget push "$PACKAGE_FILE" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        echo "‚úÖ Package published successfully!"

    - name: Create GitHub Release
      if: steps.version.outputs.is_release_tag == 'true'
      uses: softprops/action-gh-release@v2
      with:
        files: ./packages/*.nupkg
        generate_release_notes: true
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        tag_name: ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
